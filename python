import numpy as np #arrays
import pandas as pd #dataframe
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

#Loading the Dataset to a Pandas Dataframe
sonar_data = pd.read_csv('/content/Copy of sonar data.csv', header=None) #Header=none because there are no header in excel

sonar_data.head() #this displays the first five rows of the dataset
  
#check number of rows and columns
sonar_data.shape

#gives the mean, standard deviation, and other parameters for our data (percentile = less than ex 50% of the val our lessthan)
sonar_data.describe() #describes --> statistical measures of the data

#find how many examples are there for rog and mains
sonar_data[60].value_counts() #the 60 is the column index 

#using this to predict whether its a Mine or a Rock
sonar_data.groupby(60).mean()

#separating Data and Labels
X = sonar_data.drop(columns=60, axis=1) #storing all the values in x except the last column which I'm dropping the 60th
Y = sonar_data[60] #storing the 60 to y

print(X)
print(Y

#Split the data where the X_train = training data X_test = testing data, Y_train = label of those training data, Y_test = is the label of the test data
#Parameters, is where I split this x and y training and test data. test_size = 0.1 means I need 10% of the data to be the test data. stratify = to split the data based on rock or mine. random_state = split the data in a particular order
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.1, stratify=Y, random_state=1)

#how many training data /test data
#X.shape = original data without splitting into train and test 
print(X.shape, X_train.shape, X_test.shape)

print(X_train) #Training Data
print(Y_train) #Training Label

model = LogisticRegression()
#trainig the Logistic regression model with the training data
model.fit(X_train, Y_train)

#accuracy on training data
X_train_prediction = model.predict(X_train)
training_data_accuracy = accuracy_score(X_train_prediction, Y_train) #get the accuracy score X_train_pred is the model, Y_train is the real answer of this instances
print('Accuracy on training data : ', training_data_accuracy) #accuracy of train data

#accuracy on test data
X_test_prediction = model.predict(X_test)
test_data_accuracy = accuracy_score(X_test_prediction, Y_test) 
print('Accuracy on test data : ', test_data_accuracy)

input_data = (0.0200, 0.0371,	0.0428,	0.0207,	0.0954,	0.0986,	0.1539,	0.1601,	0.3109,	0.2111,	0.1609,	0.1582,	0.2238,	0.0645,	0.0660,	0.2273,	0.3100,	0.2999,	0.5078,	0.4797,	0.5783,	0.5071,	0.4328,	0.5550,	0.6711,	0.6415,	0.7104,	0.8080,	0.6791,	0.3857,	0.1307,	0.2604,	0.5121,	0.7547,	0.8537,	0.8507,	0.6692,	0.6097,	0.4943,	0.2744,	0.0510,	0.2834,	0.2825,	0.4256,	0.2641,	0.1386,	0.1051,	0.1343,	0.0383,	0.0324,	0.0232,	0.0027,	0.0065,	0.0159,	0.0072,	0.0167,	0.0180,	0.0084,	0.0090,	0.0032)

# changing the input_data to a numpy array which are faster and easy
input_data_as_numpy_array = np.asarray(input_data)

# reshape the np array as we are predicting for one instance so the model won't be confused
input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)

prediction = model.predict(input_data_reshaped)
print(prediction)

if (prediction[0]=='R'):
  print('The object is a Rock')
else:
  print('The object is a mine')


  
